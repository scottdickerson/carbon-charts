{"version":3,"file":"model-simple-bar.js","sourceRoot":"","sources":["model-simple-bar.ts"],"names":[],"mappings":"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","sourcesContent":["// Internal Imports\nimport * as Configuration from \"./configuration\";\nimport { ChartModel } from \"./model\";\nimport { Tools } from \"./tools\";\nimport * as colorPalettes from \"./services/colorPalettes\";\n\n// D3 Imports\nimport { scaleOrdinal } from \"d3-scale\";\n\n/** The charting model layer which includes mainly the chart data and options,\n * as well as some misc. information to be shared among components */\nexport class SimpleBarChartModel extends ChartModel {\n\tconstructor(services: any) {\n\t\tsuper(services);\n\t}\n\n\tgenerateDataLabels(newData) {\n\t\tconst dataLabels = {};\n\t\tnewData.labels.forEach(label => {\n\t\t\tdataLabels[label] = Configuration.legend.items.status.ACTIVE;\n\t\t});\n\n\t\treturn dataLabels;\n\t}\n\n\tgetDisplayData() {\n\t\tconst { ACTIVE } = Configuration.legend.items.status;\n\t\tconst dataLabels = this.get(\"dataLabels\");\n\n\t\tif (!this.get(\"data\")) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Remove datasets that have been disabled\n\t\tconst displayData = Tools.clone(this.get(\"data\"));\n\t\tconst dataset = displayData.datasets[0];\n\n\t\t// Remove data values that correspond to labels that are disabled\n\t\tdataset.data = dataset.data.filter((datum, i) => {\n\t\t\tconst label = displayData.labels[i];\n\n\t\t\treturn dataLabels[label] === ACTIVE;\n\t\t});\n\n\t\t// Remove labels that are disabled\n\t\tdisplayData.labels = displayData.labels.filter(label => dataLabels[label] === ACTIVE);\n\n\t\treturn displayData;\n\t}\n\n\t/*\n\t * Fill scales\n\t *\n\t*/\n\tsetColorScale() {\n\t\tconst dataset = this.getDisplayData().datasets[0];\n\t\tif (dataset.fillColors) {\n\t\t\tthis.colorScale = scaleOrdinal().range(dataset.fillColors).domain(this.allDataLabels);\n\t\t} else {\n\t\t\tconst colors = colorPalettes.DEFAULT;\n\t\t\tthis.colorScale = scaleOrdinal().range(colors).domain(this.allDataLabels);\n\t\t}\n\t}\n\n\n\tgetFillColor(label: string) {\n\t\tconst options = this.getOptions();\n\t\tif (options.getFillColor) {\n\t\t\treturn options.getFillColor(label);\n\t\t} else {\n\t\t\treturn this.getFillScale()(label);\n\t\t}\n\t}\n\n\tgetStrokeColor(label: string) {\n\t\tconst options = this.getOptions();\n\t\tif (options.getStrokeColor) {\n\t\t\treturn options.getStrokeColor(label);\n\t\t} else {\n\t\t\treturn this.colorScale(label);\n\t\t}\n\t}\n}\n"]}